{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Wrote gradientTrace function, below is code cleanup from earlier testing\
\
#may need a main function to drive the code\
i = 0\
importArray = importCSV('similarities.csv', float)\
nameList = getNames('similarities.csv', float) #doing this twice for now, convertArray doesn't like the headers\
nameList2 = [i + '2' for i in nameList]\
# print(nameList)\
psyArray = convertArray(importArray, simToDist)\
# posArray_orig = getRandPositions(21, 2)\
# posArray_mod = np.copy(posArray_orig) #to save original array\
posArray_mod, minStress = traceGradient(psyArray, learn_rate=.01, n=100)\
\
x1, y1 = zip(*posArray_orig)\
# print("stress value before : ", stress(psyArray, posArray))\
# print("pos before: ", posArray)\
# part = stress(psyArray, posArray, nameList.index('football'))\
gradX, gradY = 0,0\
stressVal = 2000\
iterations = 0\
while stressVal >= 100:\
    for x in range(0, len(posArray_mod)):\
        gradX, gradY = gradient(x, psyArray, posArray_mod, .001)\
        posArray_mod[x][0] += (gradX * -.001) #correct method for moving? applies change to both coords equally...\
        posArray_mod[x][1] += (gradY * -.001)\
        stressVal = stress(psyArray, posArray_mod) #update stress\
        iterations += 1\
        if iterations % 100 == 0:\
            print(iterations)\
print(stressVal)\
#after change in point position\
# print("stress value after : ", stress(psyArray, posArray))\
# print("gradientX: ", gradX, "gradientY: ",gradY)\
x2, y2 = zip(*posArray_mod)\
colors1 = np.random.RandomState(0).rand(21)\
# colors2 = np.random.RandomState(0).rand(21)\
# print("pos after:", posArray)\
posArray_final = np.concatenate((posArray_orig, posArray_mod))\
# print(posArray_final)\
nameList_final = nameList + nameList2\
# print(nameList_final)\
makeLabels(nameList_final, posArray_final, 5)\
makeLabels(nameList2, posArray_mod, 5)\
# plt.scatter(x1,y1, c='black')\
plt.scatter(x2,y2, c=colors1)\
plt.show()\
\
#end\
\
# print(posArray)\
# test = np.array([[0, 0],\
# [0, 0]])\
# print(test[0])\
# print(test[1])\
# print(importArray[0, 0])\
#\
# print(stress(psyArray[0, 0], test[0], test[1]))\
\
# stressSum = 0 #we want to minimize the stress for the item, how to automate this?\
# i = 0\
# fig, labels = plt.subplots()\
\
# for j in range(len(posArray)):\
#     labels.annotate(nameList[j], posArray[i], posArray[j], size=5, ha='left') #annotations work!\
}